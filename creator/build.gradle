plugins {
    id 'java'
    id 'application'
    id 'org.beryx.runtime' version '1.1.7'
}

//sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.3.2.201906051522-r'
}

application {
    mainClassName = "io.github.dsheirer.jmbe.creator.JmbeCreator"
}

jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': version
    }
    from rootProject.file('LICENSE')
}

/**
 * Java Development Kit (JDK) locations.  These paths must point to the 'bin' directory
 * within a JDK for each of the specified architectures.  These JDKs are used by the
 * runtime and runtimeZip tasks to produce platform-specific builds
 */
def jdkLinux_x64 = '/media/denny/WD250GB/java/bellsoft/linux-x64/jdk-11.0.2'
def jdkOsx_x64 = '/media/denny/WD250GB/java/bellsoft/osx-x64/jdk-11.0.2.jdk'
def jdkWindows_x64 = '/media/denny/WD250GB/java/bellsoft/windows-x64/jdk-11.0.2'

runtime {
    targetPlatform('linux-x64', jdkLinux_x64)
    targetPlatform('osx-x64', jdkOsx_x64)
    targetPlatform('windows-x64', jdkWindows_x64)

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.desktop', 'java.naming', 'jdk.unsupported', 'jdk.unsupported.desktop']
    imageZip = file("$buildDir/image/creator-" + version + ".zip")
}

/**
 * Check for existence of JDK folders for each supported platform before creating runtime images
 */
tasks.runtime.doFirst {
    def linux_x64 = new File(jdkLinux_x64)

    if(!linux_x64.exists())
    {
        println("Linux x64 JDK was not found at " + jdkLinux_x64)
        throw new GradleException("Cannot find Java Development Kit (JDK) for linux-x64 architecture.  " +
                "Please update the build.gradle script to provide the correct path")
    }

    def osx_x64 = new File(jdkOsx_x64)

    if(!osx_x64.exists())
    {
        println("OSX x64 JDK was not found at " + jdkOsx_x64);
        throw new GradleException("Cannot find Java Development Kit (JDK) for osx-x64 architecture.  " +
                "Please update the build.gradle script to provide the correct path")
    }

    def windows_x64 = new File(jdkWindows_x64)

    if(!windows_x64.exists())
    {
        println("Windows x64 JDK was not found at " + jdkWindows_x64)
        throw new GradleException("Cannot find Java Development Kit (JDK) for windows-x64 architecture.  " +
                "Please update the build.gradle script to provide the correct path")
    }
}
