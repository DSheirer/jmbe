plugins {
    id 'java'
    id 'application'
    id 'org.beryx.runtime' version '1.8.1'
}

sourceCompatibility = '8'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-io:commons-io:2.7'
    implementation 'com.github.wendykierp:JTransforms:3.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'pl.edu.icm:JLargeArrays:1.6'
}

application {
    mainClassName = "io.github.dsheirer.jmbe.creator.Creator"
}

jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': archiveVersion
    }
    from rootProject.file('LICENSE')
}

/**
 * Java Development Kit (JDK) locations.  In order to build OS-specific images, these paths must point to the 'bin'
 * directory within a JDK for each of the specified architectures.  These JDKs are used by the runtime and runtimeZip
 * tasks to produce platform-specific builds.  If none of these paths exists, then an image will be created for the
 * host OS using the installed JDK.
 */
def jdk_linux_x86_64 = '/media/denny/WD250GB/java/bellsoft/linux-x64/jdk-13.0.1'
def jdk_linux_x86_32 = '/media/denny/WD250GB/java/bellsoft/linux-x86/jdk-13.0.1'
def jdk_osx_x86_64 = '/media/denny/WD250GB/java/bellsoft/osx-x64/jdk-13.0.1.jdk'
def jdk_windows_x86_64 = '/media/denny/WD250GB/java/bellsoft/windows-x64/jdk-13.0.1'
def jdk_windows_x86_32 = '/media/denny/WD250GB/java/bellsoft/windows-x86/jdk-13.0.1'

def file_jdk_linux_x86_64 = new File(jdk_linux_x86_64)
def file_jdk_linux_x86_32 = new File(jdk_linux_x86_32)
def file_jdk_osx_x86_64 = new File(jdk_osx_x86_64)
def file_jdk_windows_x86_64 = new File(jdk_windows_x86_64)
def file_jdk_windows_x86_32 = new File(jdk_windows_x86_32)

def hasTargetJdk = file_jdk_linux_x86_32.exists() ||
        file_jdk_linux_x86_64.exists() ||
        file_jdk_osx_x86_64.exists() ||
        file_jdk_windows_x86_32.exists() ||
        file_jdk_windows_x86_64.exists()

runtime {
    if(file_jdk_linux_x86_64.exists())
    {
        targetPlatform('linux-x86_64-v' + version, jdk_linux_x86_64)
    }

    if(file_jdk_linux_x86_32.exists())
    {
        targetPlatform('linux-x86_32-v' + version, jdk_linux_x86_32)
    }

    if(file_jdk_osx_x86_64.exists())
    {
        targetPlatform('osx-x86_64-v' + version, jdk_osx_x86_64)
    }

    if(file_jdk_windows_x86_64.exists())
    {
        targetPlatform('windows-x86_64-v' + version, jdk_windows_x86_64)
    }

    if(file_jdk_windows_x86_32.exists())
    {
        targetPlatform('windows-x86_32-v' + version, jdk_windows_x86_32)
    }

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.desktop', 'java.net.http', 'java.compiler', 'jdk.compiler', 'java.base', 'jdk.crypto.ec', 'jdk.zipfs']
    imageZip = hasTargetJdk ? file("$buildDir/image/jmbe-creator.zip") : file("$buildDir/image/sdr-trunk-" + version + ".zip")
}

/**
 * Check for existence of JDK folders for each supported platform before creating runtime images
 */
tasks.runtime.doFirst {

    if(!file_jdk_linux_x86_64.exists())
    {
        println("Skipping OS Image - Linux x86 64-bit JDK was not found at " + jdk_linux_x86_64)
    }

    if(!file_jdk_linux_x86_32.exists())
    {
        println("Skipping OS Image - Linux x86 32-bit JDK was not found at " + jdk_linux_x86_32)
    }

    if(!file_jdk_osx_x86_64.exists())
    {
        println("Skipping OS Image - OSX x86 64-bit JDK was not found at " + jdk_osx_x86_64);
    }

    if(!file_jdk_windows_x86_64.exists())
    {
        println("Skipping OS Image - Windows x86 64-bit JDK was not found at " + jdk_windows_x86_64)
    }

    if(!file_jdk_windows_x86_32.exists())
    {
        println("Skipping OS Image - Windows x86 32-bit JDK was not found at " + jdk_windows_x86_32)
    }
}

